(dp1
S'output'
p2
S''
sS'layer'
p3
S'C:\\Python32\\web2py\\applications\\Casa_de_Apuestas\\models\\db.py'
p4
sS'code'
p5
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\nif not request.env.web2py_runtime_gae:     \n    ## if NOT running on Google App Engine use SQLite or other DB\n  ##  db = DAL('sqlite://storage.sqlite')\n    db = DAL('mysql://root:''@localhost/test')\n    db.define_table('categorias',\n        Field('nombre'),\n        Field('descripcion', 'text'))\n    db.define_table('eventos',    \n       Field('categoria_id', db.categorias),\n       Field('nombre'),\n       Field('fecha','date'),\n       Field('descripcion', 'text'),\n       Field('relacionpago','string'))\n  ##  db.image.title.requires = IS_NOT_IN_DB(db, db.image.title)\n  \n    db.define_table('participantes',\n        Field('nombre'),\n        Field('descripcion','text')\n    )\n    \n    db.define_table('eventosparticipantes',\n        Field('eventos_id',db.eventos),\n        Field('participantes_id',db.participantes),\n        Field('limite_apuesta','integer'),\n        primarykey=['eventos_id','participantes_id'],\n        migrate=False\n\n    )\n    \n    db.define_table('usuarios',\n        Field('nombre'),\n        Field('apellido'),\n        Field('correo'),\n        Field('password','password')\n    )\n    \n    db.define_table('maquinas',\n        Field('usuario_id',db.usuarios),\n        Field('estado','boolean'),\n        Field('ubicacion','string'),\n        Field('anho','integer'),\n        Field('descripcion','text')\n    )\n    \n      \n  \n    db.eventos.categoria_id.requires = IS_IN_DB(db, db.categorias.id, '%(nombre)s')\n    db.eventos.nombre.requires = IS_NOT_EMPTY()\n    db.eventos.fecha.requires = IS_NOT_EMPTY()\n    db.eventos.descripcion.requires = IS_NOT_EMPTY()\n    db.eventos.relacionpago.requires = IS_NOT_EMPTY()\n    \n    \n    db.participantes.nombre.requires = IS_NOT_EMPTY()\n    db.participantes.descripcion.requires = IS_NOT_EMPTY()\n    \n    db.eventosparticipantes.eventos_id.requires = IS_IN_DB(db, db.eventos.id, '%(nombre)s')\n    db.eventosparticipantes.participantes_id.requires = IS_IN_DB(db, db.participantes.id, '%(nombre)s')\n    \n    db.usuarios.nombre.requires = IS_NOT_EMPTY()\n    db.usuarios.apellido.requires = IS_NOT_EMPTY()\n    db.usuarios.correo.requires = IS_NOT_EMPTY()\n    db.usuarios.correo.requires = IS_EMAIL()    \n    db.usuarios.password.requires = IS_NOT_EMPTY()\n    \n    db.maquinas.usuario_id.requires = IS_IN_DB(db, db.usuarios.id, '%(correo)s')\n    db.maquinas.estado.requires = IS_NOT_EMPTY()    \n    db.maquinas.ubicacion.requires = IS_NOT_EMPTY()\n    db.maquinas.anho.requires = IS_NOT_EMPTY()\n    db.maquinas.descripcion.requires = IS_NOT_EMPTY() \nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore') \n    ## store sessions and tickets there\n    session.connect(request, response, db = db) \n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db, hmac_key=Auth.get_or_create_key()) \ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\n\n########################################\ndb.define_table('auth_user',\n    Field('username', type='string',\n          label=T('Username')),\n    Field('first_name', type='string',\n          label=T('First Name')),\n    Field('last_name', type='string',\n          label=T('Last Name')),\n    Field('email', type='string',\n          label=T('Email')),\n    Field('password', type='password',\n          readable=False,\n          label=T('Password')),\n    Field('created_on','datetime',default=request.now,\n          label=T('Created On'),writable=False,readable=False),\n    Field('modified_on','datetime',default=request.now,\n          label=T('Modified On'),writable=False,readable=False,\n          update=request.now),\n    Field('registration_key',default='',\n          writable=False,readable=False),\n    Field('reset_password_key',default='',\n          writable=False,readable=False),\n    Field('registration_id',default='',\n          writable=False,readable=False),\n    format='%(username)s',\n    migrate=settings.migrate)\n\n\ndb.auth_user.first_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ndb.auth_user.last_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ndb.auth_user.password.requires = CRYPT(key=auth.settings.hmac_key)\ndb.auth_user.username.requires = IS_NOT_IN_DB(db, db.auth_user.username)\ndb.auth_user.registration_id.requires = IS_NOT_IN_DB(db, db.auth_user.registration_id)\ndb.auth_user.email.requires = (IS_EMAIL(error_message=auth.messages.invalid_email),\n                               IS_NOT_IN_DB(db, db.auth_user.email))\nauth.define_tables(migrate = settings.migrate) \n\n## configure email\nmail=auth.settings.mailer\nmail.settings.server = 'logging' or 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth,filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\n"
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 194, in restricted\n  File "C:\\Python32\\web2py\\applications\\Casa_de_Apuestas\\models\\db.py", line 14, in <module>\n  File "gluon/dal.py", line 4491, in define_table\n  File "gluon/dal.py", line 677, in create_table\n  File "gluon/dal.py", line 1299, in create_sequence_and_triggers\n  File "gluon/dal.py", line 1309, in execute\n  File "gluon/dal.py", line 1304, in log_execute\n  File "gluon/contrib/pymysql/cursors.py", line 108, in execute\n  File "gluon/contrib/pymysql/connections.py", line 184, in defaulterrorhandler\nInternalError: (1050, u"Table \'categorias\' already exists")\n'
p10
s.